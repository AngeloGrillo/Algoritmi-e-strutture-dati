un noto videogioco, il giocatore deve superare delle prove di hacking inserendo delle sequenze di token esadecimali di due caratteri in un buffer di lunghezza fissa per ottenere vari bonus. Si consideri la seguente descrizione del mini-gioco.
I token vengono scelti da una matrice quadrata di dimensione N x N. Ogni token della matrice può essere usato una singola volta, ma nella matrice possono apparire dei duplicati. La scelta dei token avviene alternando una serie di movimenti per riga e per colonna, partendo sempre con una scelta iniziale sulla prima riga. I movimenti possono interessare un qualsiasi token lungo una certa riga/colonna, indipendentemente dalla distanza dalla posizione corrente. Non sono mai ammessi movimenti in diagonale. Lo schema di movimento/scelta è quindi simile alla sequenza a seguire:
• Il primo token (scelta di indice zero) viene sempre scelto sulla prima riga
• Il secondo token (scelta di indice uno) viene scelto nella colonna in cui si sia scelto il token precedente
• Il terzo token (scelta di indice due) viene scelto nella riga in cui si sia scelto il token precedente
• E così via, alternando colonna/riga nelle mosse a seguire...
I bonus ottenuti dal giocatore sono associati a delle stringhe obiettivo, composte anch'esse da token esadecimali. Per semplicità, si assuma che il bonus sia un valore intero positivo. Il giocatore ottiene tutti i bonus la cui stringa associata appaia come sottostringa nel buffer riempito dal giocatore.
Il programma riceve in input la lunghezza L del buffer, un file contenente la matrice di gioco grid.txt e un file contente la lista di bonus disponibili bonus.txt. Il file grid.txt riporta sulla prima riga la dimensione N della matrice e a seguire N righe di N token esadecimali separati da un singolo spazio. Il file bonus.txt riporta sulla prima riga il numero di B bonus disponibili e a seguire B righe nel formato: <numero_token> <valore_bonus> <sequenza_di_token>
